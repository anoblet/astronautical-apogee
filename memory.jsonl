{"type":"entity","entityType":"CodingStyle","name":"User Coding Style","observations":["Prefers minimal, composable, and reusable components.","Emphasizes decoupling and simplicity in code structure.","Strictly adheres to a global color scheme and atomic CSS principles.","Removes unnecessary comments and avoids adding new ones.","Keeps changes to existing logic minimal and only updates when necessary.","Values performance optimization and bundle size reduction.","Uses semantic HTML and prioritizes accessibility.","Favors utility CSS classes and direct element targeting over page-specific classes.","Organizes code for maintainability and extensibility, with clear separation of concerns.","Prefers content-driven component design over prop-driven design.","Expects all chat interactions and insights to be logged and instructions updated after each exchange.","Wants all code to include an empty line at the end of the file.","Consistently requests strict adherence to project and coding instructions.","Prefers clean, organized, and efficient solutions with clear, actionable, and concise communication.","Values consistency across pages and components, and expects design patterns to be maintained throughout the application.","Favors automated, agent-driven QA and iterative improvement with traceable chat logs.","Prefers minimal, streamlined approaches to file management and configuration.","Expects all code and content to be workspace-specific, efficient, and aligned with the goals and standards of the astronautical-apogee project.","Wants all changes to be as minimal as possible, with a focus on reusability and performance.","Prefers detailed technical analysis with actionable recommendations and clear prioritization.","Values introductions that are concise and clearly connect the article’s theme to actionable business outcomes, setting the stage for the content that follows.","Prefers overview + detail content patterns, with summary pages leading to detailed sub-pages.","Wants navigation and linking to be clear, hierarchical, and consistent for enhanced user experience.","Expects rigorous, step-by-step planning and validation before, during, and after code changes.","Wants all edge cases and boundary conditions to be considered and tested.","Prefers content-driven, minimal component syntax without unnecessary attributes.","Values maintainability, extensibility, and DRY principles in all code and content.","User manually edits files to maintain strict control over accessibility, minimalism, and error-free code.","User expects the assistant to validate and adapt to manual changes before proceeding with further automation.","User expects the assistant to continue autonomously, validating each step and adapting to any manual changes before proceeding.","The developer did not explicitly correct the model in any chat log from 2025-06-15 to 2025-07-10. All feedback was given as new requests or clarifications, not as corrections of errors.","The codebase uses MCP servers for memory, sequential thinking, and Playwright-based validation, as configured in mcp.json.","Tooling is agent-driven and emphasizes autonomous, iterative improvement with traceable logs.","Configuration files (e.g., mcp.json) are clean, minimal, and workspace-specific.","Strict adherence to project instructions and validation protocols is enforced via MCP servers.","The developer expects all context management, reasoning, and validation to be routed through MCP servers before, during, and after any code or design change.","The codebase is organized for maintainability, extensibility, and composability, with a focus on minimal, reusable structure and atomic CSS.","The developer prefers to use aliases for imports and utility CSS classes from the global stylesheet.","Decorators in TypeScript require the accessor keyword, per project instructions.","Styles are always scoped to components and use CSS variables and the global color scheme.","All code and content changes must be validated visually and functionally using Playwright MCP before, during, and after modification.","All chat interactions and insights must be logged and instructions updated after each exchange.","The developer expects the assistant to continue autonomously, validating each step and adapting to any manual changes before proceeding."]}
{"type":"entity","entityType":"person","name":"Andrew Noblet","observations":["The user's name is Andrew Noblet.","The user's GitHub profile URL is https://github.com/anoblet.","The developer lived in Puerto Rico.","The developer lived in Ohio.","The developer lives in New York.","The developer was born in Chile.","The developer enjoys skateboarding.","The developer enjoys snowboarding.","The developer likes guitar.","User enjoys Confucianism","User enjoys 3D printing, smart home technology, and bike riding as hobbies."]}
{"type":"entity","entityType":"user-preferences","name":"user-preferences","observations":["User prefers business plans that emphasize open-source strategy, modular architecture, AI-driven features, and community engagement.","User values clear, concise, and well-structured documentation that aligns with current best practices for open-source/tech projects.","User expects updates to reflect both service and product (platform) aspects, and to highlight community and sustainability.","User requested navigation on pricing pages. Navigation is already present via the default layout and Header component, which uses the Navigation component. Navigation is consistent, reusable, and uses the global color scheme. User values composability, minimal changes, and adherence to design system.","User wants each service's pricing page to be easily accessible from the main pricing page. Added navigation links to hosting, design, and consultation pricing pages at the top of the main pricing page using utility classes and a simple, composable structure.","Each service page now includes a clear, utility-styled link to its corresponding pricing page at the end of the main content. This ensures users can easily navigate from any service page to its pricing details.","User prefers concise, clear, and brand-aligned copy across all site pages except blog pages.","User values minimal changes, composability, and professional yet approachable tone.","User expects Playwright MCP validation for all design and copy changes.","User wants copy improvements to be visually and functionally validated.","Prefers MCP server-based context management, reasoning, and validation for all code and design changes.","Expects Playwright MCP validation for all design and style changes, and sequential thinking MCP for all reasoning and planning.","Wants all code and content to be workspace-specific, efficient, and aligned with astronautical-apogee project standards.","Values minimal, composable, and reusable components, with strict adherence to global color scheme and atomic CSS.","Prefers clean, organized, and efficient solutions with clear, actionable, and concise communication.","Expects all chat interactions and insights to be logged and instructions updated after each exchange.","Wants all changes to be as minimal as possible, with a focus on reusability and performance.","Expects rigorous, step-by-step planning and validation before, during, and after code changes.","Wants all edge cases and boundary conditions to be considered and tested.","Prefers maintainability, extensibility, and DRY principles in all code and content."]}
{"type":"entity","entityType":"page","name":"about page max width","observations":["Updated about page to use a wrapper div with max-width-56, width-100, and margin-auto utility classes, matching other pages for consistent layout. Visual and accessibility validation confirmed via Playwright MCP."]}
{"type":"entity","entityType":"correction-log","name":"user-corrections","observations":["No explicit corrections from the developer to the model were found in the chat logs from 2025-06-15 to 2025-07-10. The developer consistently provided direct instructions and requests, but did not manually override, correct, or amend the model’s output in a way that constitutes a correction. The developer’s feedback was always in the form of new requests or clarifications, not explicit corrections of errors."]}
{"type":"entity","entityType":"observation_log","name":"developer_clarifications","observations":["2025-07-02T00:00:00.md: Developer clarified with the model by responding to the agent's prompt to continue iterating, explicitly stating 'Yes'.","2025-07-03T12:00:00.md: Developer clarified with the model by specifying not to change the home page when improving copy across pages.","2025-07-10T00:00:00.md: Developer clarified with the model by instructing to force the model to ALWAYS use the sequential thinking MCP.","2025-07-10T10:15:00.md: Developer clarified with the model by instructing to ALWAYS use the Playwright MCP for design/style validation.","2025-07-10T16:00:00.md: Developer clarified with the model by stating their name is Andrew Noblet and requesting it be remembered."]}
{"date":"2025-07-11","event":"Created business-card component with front/back sides, planet icon background, atomic scoped styles, printability, and alias imports. Updated instructions and validated with Playwright MCP."}